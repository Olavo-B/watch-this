import React from 'react';
import HomeButton from '../components/HomeButton';
import LogoutButton from '../components/LogoutButton';
import SettingsButton from '../components/SettingsButton';


const Catalog = () => {
  

  return (
    <div>
        <div className='icons'>
            <SettingsButton />
            <HomeButton />
            <LogoutButton />
        </div>
    </div>
  );
};

export default Catalog;

_--------------------------------------------------

import React, { useState, useEffect, useRef } from 'react';

const InfiniteScrollList = () => {
  const [items, setItems] = useState([     'One Piece',
  'Attack on Titan',
  'My Hero Academia',
  'Demon Slayer',
  'Naruto',
  'Fullmetal Alchemist',
  'Death Note',
  'Dragon Ball Z']);
  const [isLoading, setIsLoading] = useState(false);

  const containerRef = useRef();

  const loadMoreItems = () => {
    setIsLoading(true);
    setTimeout(() => {
      const newItems = [
        'One Piece',
        'Attack on Titan',
        'My Hero Academia',
        'Demon Slayer',
        'Naruto',
        'Fullmetal Alchemist',
        'Death Note',
        'Dragon Ball Z',
        'One Punch Man',
        'Sword Art Online',
      ];
      setItems((prevItems) => [...prevItems, ...newItems]);
      setIsLoading(false);
    }, 1000);
  };


  const handleScroll = () => {
    const container = containerRef.current;
    const { scrollTop, clientHeight, scrollHeight } = container;

    console.log(scrollTop, clientHeight, scrollHeight);

    if (scrollTop + clientHeight >= scrollHeight - 10 && scrollTop > 0 && !isLoading) {
      loadMoreItems();
    }
  };

  useEffect(() => {
    const container = containerRef.current;
    container.addEventListener('scroll', handleScroll);


    return () => {
      container.removeEventListener('scroll', handleScroll);
    };
  }, [isLoading]);

  return (
    <div
      style={{
        minHeight: '100vh',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'flex-start',
        paddingLeft: '20px',
      }}
    >
      <div
        ref={containerRef}
        style={{
          width: '100vw',
          maxWidth: '600px',
          height: '80vh',
          overflowY: 'auto',
          padding: '20px',
          background: 'rgba(255, 255, 255, 0.3)',
          borderRadius: '30px',
          backdropFilter: 'blur(10px)',
        }}
      >
        {items.map((item, index) => (
          <div
            key={index}
            style={{
              marginBottom: '10px',
              padding: '10px',
              color: 'white',
              fontWeight: 'bold',
            }}
          >
            {item}
          </div>
        ))}
        {isLoading && <p>Loading...</p>}
      </div>
    </div>
  );
};

export default InfiniteScrollList;

======================================================
const  signup = async (email, password) => {
    // const usersStorage = JSON.parse(localStorage.getItem("users_bd"));
    const usersStorage = await fetchUserList();
    const usersInternalStorage = JSON.parse(localStorage.getItem("users_bd"));
    

    // console.log(usersStorage);

    const hasUser = usersStorage?.filter((user) => user.email === email) || usersInternalStorage?.filter((user) => user.email === email);

    console.log(hasUser);

    if (hasUser?.length) {
      alert( "Já tem uma conta com esse E-mail");
      return;
    } else {
      console.log("Usuário cadastrado com sucesso");
    }

    let newUser;

    if (usersStorage) {
      newUser = [...usersStorage, { email, password}];
    } else {
      newUser = [{ email, password }];
    }

    localStorage.setItem("users_bd", JSON.stringify(newUser));
    await createUser({ email, password, catalog: []});

    return;
  };

  =======================================================

  server.post('/users/login', async (request, reply) => {
    const {email, password} = request.body;

    const user = await database.getUser(email);

    console.log(user[0].hash);
    console.log(password);

    if (user == null) {
        return reply.status(404).send();
    }

    let r;

    bcrypt.compare(password, user[0].hash, function(err, result) {
        console.log(typeof(result));
        if (result) {
            r = true;
        } else {
            r = false;
        }
    });

    return reply.send(r)
});

========================================================

import React from 'react';
import HomeButton from '../components/HomeButton';
import SignOut from '../components/LogoutButton';
import CatalogButton from '../components/CatalogButton';

const Profile = () => {
  return (
    
    <div>
        <div className='icons'>
        <CatalogButton />
        <HomeButton />
        <SignOut />
        </div>
    </div>
    
  );
};

export default Profile;


